variables:
  DOCKER_REG: dk.jingli365.com
  DOCKER_NAME: $CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME
  DOCKER_CI_NAME: $DOCKER_REG/$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME:$CI_BUILD_REF
  DOCKER_BRANCH_NAME: $DOCKER_REG/$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME:$CI_BUILD_REF_SLUG
  NPM_CACHE_DIR: /cache/build-cache/npmhash/
  JL_APP_DAEMON: "true"
  JL_APP_COMMAND: node server.js >/data/log/nohup.out 2>&1
  JL_APP_DAEMON_WAIT_INIT: log/nohup.out
  JL_APP_REDIS: redis://l.jingli365.com:16379

stages:
  - build
  - docker
  - deploy

image: docker:git

before_script:
  - 'eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY">.k && chmod 600 .k && ssh-add .k && rm -f .k'
  - 'mkdir -p ~/.ssh && echo -e "Host *\n\tStrictHostKeyChecking no\n\tSendEnv JL_APP_*\n\n" > ~/.ssh/config'
  - mkdir -p /cache/build-cache/.npm && ln -s /cache/build-cache/.npm ~/

build:dist:
  stage: build
  only:
    - branches
  image: $DOCKER_REG/jl-build:v3
  cache:
    key: $CI_PIPELINE_ID
    paths:
      - dist/
  script:
    - mkdir -p $NPM_CACHE_DIR/`npmhash`/node_modules && ln -s $NPM_CACHE_DIR/`npmhash`/node_modules .
    - echo `npmhash`
    - git submodule update --init --checkout
    - npm install
    - gulp dist
    - ls dist/http/ -al

build:image:
  stage: docker
  cache:
    key: $CI_PIPELINE_ID
    paths:
      - dist/
  script:
    - docker login -u dockeruser -p $DOCKER_PASSWD $DOCKER_REG
    - docker build -t $DOCKER_CI_NAME . --build-arg NPM_TOKEN=$NPM_TOKEN
    - docker push $DOCKER_CI_NAME

deploy:master:
  stage: deploy
  only:
    - /^master$/
  environment:
    name: dev
    url: https://l.jingli365.com/proj/svr-jlbudget/
  variables:
    JL_APP_OLD_POSTGRES_URL: postgres://times:time0418@l.jingli365.com/qmtrip
  script:
    - docker login -u dockeruser -p $DOCKER_PASSWD $DOCKER_REG
    - docker pull $DOCKER_CI_NAME
    - docker tag $DOCKER_CI_NAME $DOCKER_BRANCH_NAME
    - docker push $DOCKER_BRANCH_NAME
    - echo deploy to https://l.jingli365.com
    - ssh test@l.jingli365.com /home/test/bin/docker_start.sh $DOCKER_REG $DOCKER_NAME $CI_BUILD_REF_SLUG -p 0.0.0.0:14103:4103

deploy:test:
  stage: deploy
  only:
    - /^test$/
  environment:
    name: test
    url: https://budget.t.jingli365.com
  variables:
    JL_APP_OLD_POSTGRES_URL: postgres://times:time0418@l.jingli365.com:15432/time_test
  script:
    - docker login -u dockeruser -p $DOCKER_PASSWD $DOCKER_REG
    - docker pull $DOCKER_CI_NAME
    - docker tag $DOCKER_CI_NAME $DOCKER_BRANCH_NAME
    - docker push $DOCKER_BRANCH_NAME
    - echo deploy to https://t.jingli365.com
    - ssh test@l.jingli365.com /home/test/bin/docker_start.sh $DOCKER_REG $DOCKER_NAME $CI_BUILD_REF_SLUG -p 0.0.0.0:14203:4103

deploy:jingli365:
  stage: deploy
  only:
    - /^master|test|release$/
  when: manual
  environment:
    name: test
    url: http://demo.jingli365.com
  script:
    - docker login -u dockeruser -p $DOCKER_PASSWD $DOCKER_REG
    - docker pull $DOCKER_CI_NAME
    - docker tag $DOCKER_CI_NAME $DOCKER_BRANCH_NAME
    - docker push $DOCKER_BRANCH_NAME
    - echo deploy to https://demo.jingli365.com
    - ssh test@demo.jingli365.com /home/test/bin/docker_start.sh $DOCKER_REG $DOCKER_NAME $CI_BUILD_REF_SLUG -p 14103:4103

deploy:release:
  stage: deploy
  only:
    - /^release$/
  when: manual
  environment:
    name: release
    url: https://budget.jingli365.com
  script:
    - docker login -u dockeruser -p $DOCKER_PASSWD $DOCKER_REG
    - docker pull $DOCKER_CI_NAME
    - docker tag $DOCKER_CI_NAME $DOCKER_BRANCH_NAME
    - docker push $DOCKER_BRANCH_NAME
    - echo deploy to https://budget.jingli365.com
    - ssh test@budget.jingli365.com /home/test/bin/docker_start.sh $DOCKER_REG $DOCKER_NAME $CI_BUILD_REF_SLUG -p 0.0.0.0:4103:4103